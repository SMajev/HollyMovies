"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const got_1 = __importDefault(require("got"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const chalk_1 = __importDefault(require("chalk"));
const log_update_1 = __importDefault(require("log-update"));
const signale_1 = __importDefault(require("./signale"));
const util_1 = require("./util");
const updateCheck = async (pkg) => {
    const beta = pkg.version.includes('beta');
    const releases = await (0, got_1.default)('https://api.github.com/repos/d-fi/releases/releases').json();
    const data = releases.filter((r) => r.prerelease === beta)[0];
    if (data.tag_name > pkg.version) {
        return data;
    }
    log_update_1.default.clear();
    console.info(signale_1.default.info(`d-fi is up-to-date (${data.tag_name})`));
};
const updateBinary = async (pkg) => {
    (0, log_update_1.default)(signale_1.default.info('Checking for new updates...'));
    const data = await updateCheck(pkg);
    log_update_1.default.clear();
    if (data) {
        let platform = '';
        switch (process.platform) {
            case 'linux':
            case 'cygwin':
                platform = 'linux';
                break;
            case 'darwin':
                platform = 'macos';
                break;
            case 'win32':
                platform = 'win';
                break;
            default:
                throw new Error('Unknown platform: ' + process.platform);
        }
        const bin = `d-fi-${data.tag_name}${platform === 'win' ? '.exe' : ''}`;
        if ((0, fs_1.existsSync)(bin)) {
            throw new Error(`${bin} already exists`);
        }
        const asset = data.assets.find((a) => a.name.includes(platform));
        if (asset) {
            console.log(signale_1.default.info('Changelog:'));
            console.log(data.body + '\n');
            console.log(`  Downloading ${asset.browser_download_url}`);
            const bar = (0, util_1.progressBar)(asset.size, 40);
            const humanSizeTotal = (asset.size / 1024 / 1024).toFixed(2);
            const { body } = await (0, got_1.default)(asset.browser_download_url, { responseType: 'buffer' }).on('downloadProgress', ({ transferred }) => {
                (0, log_update_1.default)(`  ${bar(transferred)} | ${humanSizeTotal}MiB`);
            });
            log_update_1.default.done();
            (0, log_update_1.default)(signale_1.default.info('Extracting archive...'));
            const zip = new adm_zip_1.default(body).getEntries()[0].getData();
            log_update_1.default.clear();
            console.log(signale_1.default.info('Writing to ' + bin));
            (0, fs_1.writeFileSync)(bin, zip, { mode: '755' });
            console.log(signale_1.default.info(`Updated. Run ${chalk_1.default.yellow(bin)} to use the new version.`));
        }
        else {
            throw new Error(`Unable to find asset for ${platform}`);
        }
    }
};
exports.default = updateBinary;
