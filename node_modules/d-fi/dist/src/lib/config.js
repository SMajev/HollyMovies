"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const dot_prop_1 = __importDefault(require("dot-prop"));
const signale_1 = __importDefault(require("./signale"));
const old_arl = '118fe80f967e1883469b6093568f930c3a5828af71bc37d631d95252ae3ea88201131e8587be7b668d824daecd0310131652507bab67b4d135917575e8ab9ab911a1cc59b342dfe3815a4b49f10f506577778bc3e8cd98dcfe0f8ba24f114a6f';
const defaultConfig = {
    concurrency: 4,
    saveLayout: {
        track: 'Music/{ALB_TITLE}/{SNG_TITLE}',
        album: 'Music/{ALB_TITLE}/{SNG_TITLE}',
        artist: 'Music/{ALB_TITLE}/{SNG_TITLE}',
        playlist: 'Playlist/{TITLE}/{SNG_TITLE}',
    },
    playlist: {
        resolveFullPath: false,
    },
    trackNumber: true,
    fallbackTrack: true,
    fallbackQuality: true,
    coverSize: {
        '128': 500,
        '320': 500,
        flac: 1000,
    },
    cookies: {
        arl: 'c911a4ac9f44a52bf23720cc88588557d999b975094068d258e617bf3e9110a2626c2ff7f5d3cb471b435512e0f5a4de4d7d7e3becad4bf80b0a0e230d9001a814124f87833fe772fb6b1327d2be740f65bc5bcfc1de9171926b5ea9aae69db7',
    },
};
class Config {
    userConfigLocation;
    configFile;
    store;
    constructor(configFile = 'd-fi.config.json') {
        this.userConfigLocation = null;
        this.configFile = configFile;
        this.store = this.getConfig(configFile);
        // migrate data
        if (this.store.cookies.arl === old_arl) {
            this.set('cookies.arl', defaultConfig.cookies.arl);
        }
    }
    getConfig(configFile) {
        if (!(0, fs_1.existsSync)(configFile)) {
            return defaultConfig;
        }
        try {
            const userConfig = JSON.parse((0, fs_1.readFileSync)(configFile, 'utf-8'));
            if (userConfig.saveLayout) {
                userConfig.saveLayout = { ...defaultConfig.saveLayout, ...userConfig.saveLayout };
            }
            if (userConfig.playlist) {
                userConfig.playlist = { ...defaultConfig.playlist, ...userConfig.playlist };
            }
            if (userConfig.coverSize) {
                userConfig.coverSize = { ...defaultConfig.coverSize, ...userConfig.coverSize };
            }
            if (userConfig.cookies) {
                userConfig.cookies = { ...defaultConfig.cookies, ...userConfig.cookies };
            }
            this.userConfigLocation = configFile;
            return { ...defaultConfig, ...userConfig };
        }
        catch (err) {
            console.error(signale_1.default.error(`Unable to parse config: ${configFile}`));
            console.error(signale_1.default.note(err.message));
            console.warn(signale_1.default.warn('Falling back to default config'));
            return defaultConfig;
        }
    }
    /**
     * Get an item.
     * @param key - The key of the item to get.
     * @param defaultValue - The default value if the item does not exist.
     */
    get(key, defaultValue) {
        return dot_prop_1.default.get(this.store, key, defaultValue);
    }
    /**
     * Set an item or multiple items at once.
     * @param {key|object} - You can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a key to access nested properties. Or a hashmap of items to set at once.
     * @param value - Must be JSON serializable. Trying to set the type `undefined`, `function`, or `symbol` will result in a `TypeError`.
     */
    set(key, value, persist = true) {
        dot_prop_1.default.set(this.store, key, value);
        if (persist) {
            (0, fs_1.writeFileSync)(this.configFile, JSON.stringify(this.store, null, 2));
        }
        return this.configFile;
    }
    /**
     * Delete an item.
     * @param key - The key of the item to delete.
     */
    delete(key) {
        dot_prop_1.default.delete(this.store, key);
    }
}
exports.default = Config;
