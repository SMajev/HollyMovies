declare type keysType = 'concurrency' | 'saveLayout' | 'saveLayout.track' | 'saveLayout.album' | 'saveLayout.artist' | 'saveLayout.playlist' | 'playlist.resolveFullPath' | 'trackNumber' | 'fallbackTrack' | 'fallbackQuality' | 'coverSize' | 'coverSize.128' | 'coverSize.320' | 'coverSize.flac' | 'cookies.arl';
declare class Config {
    userConfigLocation: string | null;
    private configFile;
    private store;
    constructor(configFile?: string);
    private getConfig;
    /**
     * Get an item.
     * @param key - The key of the item to get.
     * @param defaultValue - The default value if the item does not exist.
     */
    get(key: keysType, defaultValue?: string | boolean | number): string | number | boolean | undefined;
    /**
     * Set an item or multiple items at once.
     * @param {key|object} - You can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a key to access nested properties. Or a hashmap of items to set at once.
     * @param value - Must be JSON serializable. Trying to set the type `undefined`, `function`, or `symbol` will result in a `TypeError`.
     */
    set(key: keysType, value: string | boolean | number, persist?: boolean): string;
    /**
     * Delete an item.
     * @param key - The key of the item to delete.
     */
    delete(key: keysType): void;
}
export default Config;
